<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NLP_初试模型”</title>
    <url>/2021/05/14/NLP-%E5%88%9D%E8%AF%95%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>对数据进行分词，然后构造词向量，使用神经网络、决策树、逻辑回归、朴素贝叶斯、决策树进行模型训练</p>
<span id="more"></span>

<h1 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">r&quot;F:\自然语言项目\自行车.xlsx&quot;</span>)</span><br><span class="line">df.head()</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">words= []</span><br><span class="line"><span class="keyword">for</span> i,row <span class="keyword">in</span>  df.iterrows():</span><br><span class="line">    word = jieba.cut(row[<span class="string">&#x27;评价&#x27;</span>])</span><br><span class="line">    result = <span class="string">&#x27;  &#x27;</span>.join(word)</span><br><span class="line">    words.append(result)</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line">vect = CountVectorizer() <span class="comment">#将文本转换为数值，构成特征向量</span></span><br><span class="line">X = vect.fit_transform(words)</span><br><span class="line">X = X.toarray()</span><br><span class="line">words_bag = vect.vocabulary_</span><br><span class="line"><span class="built_in">len</span>(words_bag)</span><br><span class="line">pd.DataFrame(X)</span><br><span class="line">y = df[<span class="string">&#x27;标签&#x27;</span>]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = <span class="number">0.1</span>,random_state = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line">mlp = MLPClassifier()</span><br><span class="line">mlp.fit(X_train,y_train)</span><br><span class="line">mlp_pred = mlp.predict(X_test)</span><br><span class="line">mlp_pred</span><br><span class="line">a = pd.DataFrame()  <span class="comment">#创建一个空的DataFrame</span></span><br><span class="line">a[<span class="string">&#x27;预测值&#x27;</span>] = <span class="built_in">list</span>(y_test)</span><br><span class="line">a[<span class="string">&#x27;实际值&#x27;</span>] = <span class="built_in">list</span>(mlp_pred)</span><br><span class="line">a.head()<span class="comment">#查看我们创建的DataFrame</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">mlp_score = accuracy_score(mlp_pred,y_test)</span><br><span class="line">result.append([<span class="string">&quot;神经网络&quot;</span>, mlp_score])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;神经网络准确度：&quot;</span>, mlp_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">logist = LogisticRegression()</span><br><span class="line">logist.fit(X_train, y_train)</span><br><span class="line">logist_pred = logist.predict(X_test)</span><br><span class="line">logist_score = accuracy_score(logist_pred,y_test)</span><br><span class="line">result.append([<span class="string">&quot;逻辑回归&quot;</span>, logist_score])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逻辑回归准确度：&quot;</span>, logist_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># kmeans算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">kms = KMeans(n_clusters = <span class="number">2</span>)</span><br><span class="line">kms.fit(X)</span><br><span class="line">kms_pred = kms.labels_</span><br><span class="line">kms_score = accuracy_score(kms_pred, y)</span><br><span class="line">result.append([<span class="string">&quot;KMeans&quot;</span>, kms_score])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;KMeans算法准确度：&quot;</span>, kms_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策树</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">tree = DecisionTreeClassifier(random_state=<span class="number">0</span>)</span><br><span class="line">tree.fit(X_train, y_train)</span><br><span class="line">tree_pred = tree.predict(X_test)</span><br><span class="line">result.append([<span class="string">&quot;决策树&quot;</span>, tree_score])</span><br><span class="line">tree_score = accuracy_score(tree_pred, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;决策树模型准确度：&quot;</span>, tree_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 朴素贝叶斯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line">nvb = GaussianNB()</span><br><span class="line">nvb.fit(X_train, y_train)</span><br><span class="line">nvb_pred = nvb.predict(X_test)</span><br><span class="line">nvb_score = accuracy_score(nvb_pred, y_test)</span><br><span class="line">result.append([<span class="string">&quot;朴素贝叶斯&quot;</span>, nvb_score])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;朴素贝叶斯模型准确度：&quot;</span>, nvb_score)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;[[&#x27;神经网络&#x27;, 0.9666666666666667],</span><br><span class="line">[&#x27;逻辑回归&#x27;, 0.9833333333333333],</span><br><span class="line">[&#x27;KMeans&#x27;, 0.3983333333333333],</span><br><span class="line">[&#x27;决策树&#x27;, 0.8833333333333333],</span><br><span class="line">[&#x27;朴素贝叶斯&#x27;, 0.95]]</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="稍加改进"><a href="#稍加改进" class="headerlink" title="稍加改进"></a>稍加改进</h1><p>根据分词结果，手动添加了一些常用词，从网上找到一些常用的停用词</p>
<p>在导入数据后，对jieba导入了常用词，然后分词，并去除停用词，然后再进行词向量、模型训练</p>
<p><strong>下面是改进后的分词的代码，后面词向量和模型训练的代码不变</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入停用词和常用词</span></span><br><span class="line">stop = <span class="built_in">open</span>(<span class="string">&#x27;F:\自然语言项目\停用词.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">stopWord = stop.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">jieba.load_userdict(<span class="string">&quot;F:\自然语言项目\常用词库.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分词</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">words = []</span><br><span class="line"><span class="keyword">for</span> i,row <span class="keyword">in</span>  df.iterrows():</span><br><span class="line">    word = jieba.cut(row[<span class="string">&#x27;评价&#x27;</span>])</span><br><span class="line">    s = <span class="built_in">list</span>(word)</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(j.strip() <span class="keyword">in</span> stopWord):</span><br><span class="line">            r.append(j)</span><br><span class="line">    result = <span class="string">&#x27;  &#x27;</span>.join(r)</span><br><span class="line">    words.append(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="最终结果-1"><a href="#最终结果-1" class="headerlink" title="最终结果"></a>最终结果</h3><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;[[&#x27;神经网络&#x27;, 0.9833333333333333],</span><br><span class="line">[&#x27;逻辑回归&#x27;, 1.0],</span><br><span class="line">[&#x27;KMeans&#x27;, 0.3983333333333333],</span><br><span class="line">[&#x27;决策树&#x27;, 0.9333333333333333],</span><br><span class="line">[&#x27;朴素贝叶斯&#x27;, 0.9666666666666667]]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>可以看到，几个模型的准确度都显著提升</p>
<p>可是逻辑回归准确度1？？？这合理吗？？</p>
<p>目前代码没有发现问题，后续跟进</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>逻辑回归效果较好</p>
<p>神经网络效果也不错</p>
<p>kmeans效果较差</p>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>jieba</tag>
      </tags>
  </entry>
  <entry>
    <title>停在原地的方案数</title>
    <url>/2021/05/13/%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/">原题链接</a></p>
<p>有一个长度为 arrLen 的数组，开始有一个指针在索引 0 处。</p>
<p>每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。</p>
<p>给你两个整数 steps 和 arrLen ，请你计算并返回：在恰好执行 steps 次操作以后，指针仍然指向索引 0 处的方案数。</p>
<p>由于答案可能会很大，请返回方案数 模 10^9 + 7 后的结果。</p>
<span id="more"></span>

<p>示例 1：</p>
<blockquote>
<p><strong>输入</strong>：steps = 3, arrLen = 2<br><strong>输出</strong>：4<br><strong>解释</strong>：3 步后，总共有 4 种不同的方法可以停在索引 0 处。<br>向右，向左，不动<br>不动，向右，向左<br>向右，不动，向左<br>不动，不动，不动</p>
</blockquote>
<p>示例  2：</p>
<blockquote>
<p><strong>输入</strong>：steps = 2, arrLen = 4<br><strong>输出</strong>：2<br><strong>解释</strong>：2 步后，总共有 2 种不同的方法可以停在索引 0 处。<br>向右，向左<br>不动，不动</p>
</blockquote>
<p>下面是一开始我用的递归的方法，也能实现，但超时了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWays</span>(<span class="params">self, steps: <span class="built_in">int</span>, arrLen: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># 写函数，参数有 当前位置，剩下步数</span></span><br><span class="line">        <span class="comment"># 每次向前右、向左、不动 三个递归</span></span><br><span class="line">        <span class="keyword">global</span> result</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">index, left_steps</span>):</span> </span><br><span class="line">            <span class="keyword">global</span> result</span><br><span class="line">            f = <span class="number">1</span> <span class="comment"># 1表示可以继续，0表示不能继续</span></span><br><span class="line">            <span class="keyword">if</span> left_steps &lt; index: <span class="comment"># 剩余步数小于当前位置，表示无法回到原位</span></span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> index == <span class="number">0</span> <span class="keyword">and</span> left_steps ==<span class="number">0</span>: <span class="comment"># 刚好回到原位</span></span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;=arrLen:</span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> left_steps == index:</span><br><span class="line">                result +=<span class="number">1</span></span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                move(index + <span class="number">1</span>, left_steps - <span class="number">1</span>)</span><br><span class="line">                move(index - <span class="number">1</span>, left_steps - <span class="number">1</span>)</span><br><span class="line">                move(index, left_steps - <span class="number">1</span>)</span><br><span class="line">        move(<span class="number">0</span>, steps)</span><br><span class="line">        s = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        <span class="keyword">return</span> result % s</span><br></pre></td></tr></table></figure>
<p><strong>下面是正确的使用动态规划的方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWays</span>(<span class="params">self, steps: <span class="built_in">int</span>, arrLen: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        mod = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        maxColumn = <span class="built_in">min</span>(arrLen - <span class="number">1</span>, steps) <span class="comment"># 最大下标</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment"># dp[i][j]表示通过i次走到位置j的方案数</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment"># range函数范围：[0, steps + 1 )</span></span><br><span class="line">        <span class="comment"># maxColumn是最大下标，因此开辟的空间数是maxColumn+1</span></span><br><span class="line">        <span class="comment"># 经过0次，到达除了0以外的位置的方案数都是0</span></span><br><span class="line">        dp = [[<span class="number">0</span>] * (maxColumn + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(steps + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> <span class="comment"># 最开始一定在位置0，因此经过0步，到位置0的方案是1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, steps + <span class="number">1</span>): <span class="comment"># range函数前开后闭，因此+1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, maxColumn + <span class="number">1</span>):</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] <span class="comment"># dp[i][j]一定可以由上一步&quot;不动&quot;得到</span></span><br><span class="line">                <span class="keyword">if</span> j &gt;= <span class="number">1</span>: <span class="comment"># 如果j大于1的话，就一定可以由前面一个位置右移过来（j==0的话在最左边，不可能右移得到）</span></span><br><span class="line">                    dp[i][j] = (dp[i][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod</span><br><span class="line">                <span class="keyword">if</span> j &lt;= maxColumn - <span class="number">1</span>: <span class="comment"># 类似的，j小于maxColumn-1（</span></span><br><span class="line">                    dp[i][j] = (dp[i][j] + dp[i - <span class="number">1</span>][j + <span class="number">1</span>]) % mod</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[steps][<span class="number">0</span>]  <span class="comment"># 返回经过steps此走到位置0的方案数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>动态规划基本思想</strong>：将问题划分为更小的子问题，由众多子问题得到原问题的解</p>
<p>比前面我自己的方法快就快在，他用数组记录了各个子问题的解（一开始我也想到了用数组记录，但后面方向错了，最后放弃，终究还是对动态规划不够熟悉，白学了白学了…）</p>
<p><strong>关键思想：</strong>dp*[<em>i</em>][<em>j</em>]=<em>dp</em>[<em>i</em>−1][<em>j</em>−1]+<em>dp</em>[<em>i</em>−1][<em>j</em>]+<em>dp</em>[<em>i</em>−1][<em>j</em>+1]</p>
<p>即每一个状态都可以由其他状态经过左移或右移或不动得到，因此在不越界的情况下，每一个状态的方案数都可以由前面的三个状态的方案数相加得到，</p>
<p>因此遍历每一次运动（这里要注意，需要记录第0次的方案数，因为第一次，即i==1的时候的数据是由i==0得到的），每一个下标，不断完善二维数组，得到答案。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：O(steps×min(arrLen,steps)。动态规划需要计算每个状态的值。</li>
<li>空间复杂度：O(min(arrLen,steps)。使用空间优化的做法，可以将空间复杂度降低到 O(min(arrLen,steps)</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态规划：将大问题分解成众多简单小问题，由小问题得到大问题</p>
<p>别总想着递归递归了！浪费时间！（<del>不过确实真香</del>）</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>YEDDA中文版</title>
    <url>/2021/05/15/YEDDA%E4%B8%AD%E6%96%87%E7%89%88/</url>
    <content><![CDATA[<p><a href="https://github.com/yohowitch/data-annotation">安装教程</a></p>
<p>可以选择原版或者支持python3.x的中文版</p>
<p><a href="https://blog.csdn.net/weixin_42167172/article/details/106674820">BIO转换参考</a></p>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>YEDDA</tag>
      </tags>
  </entry>
  <entry>
    <title>数组中两个数的最大异或值</title>
    <url>/2021/05/27/%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/">原题链接</a></p>
<p>给你一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j &lt; n 。</p>
<p>进阶：你可以在 O(n) 的时间解决这个问题吗？</p>
<span id="more"></span>

<p>示例 1：</p>
<blockquote>
<p>输入：nums = [3,10,5,25,2,8]<br>输出：28<br>解释：最大运算结果是 5 XOR 25 = 28.</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：nums = [0]<br>输出：0</p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p>输入：nums = [2,4]<br>输出：6</p>
</blockquote>
<p>示例 4：</p>
<blockquote>
<p>输入：nums = [8,10,2]<br>输出：10</p>
</blockquote>
<p>示例 5：</p>
<blockquote>
<p>输入：nums = [14,70,53,83,49,91,36,80,92,51,66,70]<br>输出：127</p>
</blockquote>
<p>提示：</p>
<blockquote>
<p>1 &lt;= nums.length &lt;= 2 * 104<br>0 &lt;= nums[i] &lt;= 231 - 1</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>乍一看似乎不难，只需创建一个矩阵，遍历每个数，进行异或运算找到最大值即可</p>
<p>但明显两个循环是O（n^2)超时了</p>
<p>首先我们知道:</p>
<ol>
<li>异或运算：相同得0，不同为1。又因为我们想要寻找最大的运算结果，因此希望结果有尽可能多的1，且分布在高位上。</li>
<li>s = x ^ y    =&gt;    x = s ^ y</li>
</ol>
<p>根据1，想到了贪心算法，从高位开始，贪1</p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def findMaximumXOR(self, nums: List[int]) -&gt; int:</span><br><span class="line">        HIGH_BIT = len(format(max(nums), &#x27;b&#x27;))</span><br><span class="line">        /*format:格式化，将内容转为二进制*/</span><br><span class="line">        </span><br><span class="line">        ans = 0</span><br><span class="line"></span><br><span class="line">        for k in range(HIGH_BIT, -1, -1):</span><br><span class="line">        # 从高位向地位遍历</span><br><span class="line">        </span><br><span class="line">            seen = set(i &gt;&gt; k for i in nums)</span><br><span class="line">            # 把nums里的数都右移k位</span><br><span class="line">            </span><br><span class="line">            ans = ans * 2 + 1</span><br><span class="line">		   /* 把ans末尾加一位1</span><br><span class="line">		      ans表示当前位数所能异或得到的最大值</span><br><span class="line">		   */</span><br><span class="line">            for i in seen:</span><br><span class="line">                if i ^ ans in seen:</span><br><span class="line">                # i ^ ans in seen,根据第二条，表示seen里有两个值能异或得到ans</span><br><span class="line">                </span><br><span class="line">                    break</span><br><span class="line">                    # 说明ans末尾可以取一，进入下一个循环</span><br><span class="line">            else:</span><br><span class="line">                ans -= 1</span><br><span class="line">                # 说明没有两个数可以异或得到末尾加一的ans，因此ans末尾变为0</span><br><span class="line">        </span><br><span class="line">        return ans </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>思想有些巧妙，可以反复推敲</p>
<p>思考问题：该算法从高位遍历到低位，对于每一位都去寻找能否有两个数异或得到1，可是最终结果应该是所有的位数都是同样的两个数异或得到？</p>
<p>因为ans是从0不断乘2，有一个记录的过程，相当于剪枝。对于第x位，ans若取了1，则在后面的循环中，不能异或得到ans[x]==1的数都必然不可能得到 i ^ ans in seen 了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>异或</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
</search>
